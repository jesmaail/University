% brute force solution to 8 queens puzzle% place queens on chess board so non are in attacking positions% only need to say position in each row (1-8) which must all be distinct% so list denotes positions in row1 upto row8.% member with remaindermember_rem(X,[X|Xs],Xs).member_rem(X,[Y|Ys],[Y|R]) :-        member_rem(X,Ys,R).% generate list of n distinct digits - assume list is long enoughgen_list(0,[],_).gen_list(N,[X|Xs],D) :-        N > 0,        N1 is N-1,        member_rem(X,D,R),        gen_list(N1,Xs,R).% the generatorgen(Qns):-                gen_list(8,Qns,[1,2,3,4,5,6,7,8]).% create co-ordinatewise productcw_prod([],[],[]).cw_prod([X|Xs],[Y|Ys],[X-Y|XYs]) :-        cw_prod(Xs,Ys,XYs).gen_with_row(QR):-        gen(Q),        cw_prod([1,2,3,4,5,6,7,8],Q,QR).% check for attacking positionssafe(X1-Y1,X2-Y2) :-        abs(X1-X2) =\= abs(Y1-Y2).% checks U-V is safe for all elements in list L (which consists of pairs)safe(_-_,[]):-!.safe(U-V,[X-Y|XYs]) :-        safe(U-V,X-Y),        safe(U-V,XYs).% L is a list of all safe pairsall_safe([]).all_safe([X-Y|XYs]) :-        safe(X-Y,XYs), % first elt safe wrt tail        all_safe(XYs).        solve(Q) :-        gen_with_row(Q),        all_safe(Q).spaces(N) :- (count(_,1,N) do write('| ')). /***   spaces(0) :- !.spaces(N) :-        N>0,        N1 is N-1,        write('| '),        spaces(N1).*****/% write a lineline(0) :- !.line(N) :-         write(' -'),        N1 is N-1,        line(N1).write_board([]) :- nl.write_board([_-Y|XYs]) :-        line(8),nl,        Y1 is Y-1,Y2 is 8-Y,        spaces(Y1),        write('|Q'),spaces(Y2),write('|'),nl,        write_board(XYs).                                                                                      % timer - use runtime from statisticstimer(T) :- statistics(runtime,[T|_]).test :- timer(U),solve(_),timer(V),        D is V-U,format('test took ~3d sec.~n',[D]). % print with 3dp and a newlinetest2 :- timer(U),setof(Q,solve(Q),_),timer(V),        D is V-U,format('test took ~3d sec.~n',[D]). % print with 3dp and a newline       